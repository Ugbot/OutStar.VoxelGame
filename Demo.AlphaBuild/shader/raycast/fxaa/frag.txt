#version 120

uniform sampler2D iTex; 
uniform vec3      iResolution; 

varying vec2 tex_uv;

//========================================================================================
vec3 Box(vec2 p)
{
	return texture2D(iTex , p.xy+vec2(0.5,0.5) / iResolution.xy).xyz ;	
}
//========================================================================================
void main( void ) 
{
	float FXAA_SPAN_MAX	=8.0;
	float FXAA_REDUCE_MUL =(1.0/8.0);
	float FXAA_REDUCE_MIN =(1.0/64.0);

	vec2 uv = tex_uv;
	vec2 add = vec2(1.0) / iResolution.xy;
			
	vec3 rgbNW = Box(uv+vec2(-add.x, -add.y));
	vec3 rgbNE = Box(uv+vec2( add.x, -add.y));
	vec3 rgbSW = Box(uv+vec2(-add.x,  add.y));
	vec3 rgbSE = Box(uv+vec2( add.x,  add.y));
	vec3 rgbM  = Box(uv);
	
	vec3 luma	 = vec3(0.299, 0.587, 0.114);
	float lumaNW = dot(rgbNW, luma);
	float lumaNE = dot(rgbNE, luma);
	float lumaSW = dot(rgbSW, luma);
	float lumaSE = dot(rgbSE, luma);
	float lumaM  = dot(rgbM,  luma);
	
	float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
	float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
	
	vec2 dir;
	dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
	dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
	
	
	float dirReduce = max(
		(lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
	  
	float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);
	

	dir = min(vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),
		  max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
		  dir * rcpDirMin)) * add;

		
	vec3 rgbA = (1.0/2.0) * (Box(uv + dir * (1.0/3.0 - 0.5)) +
							 Box(uv + dir * (2.0/2.0 - 0.5)));
	
	vec3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) *
		(Box(uv.xy + dir * (0.0/3.0 - 0.5)) +
		 Box(uv.xy + dir * (3.0/3.0 - 0.5)));
	
	float lumaB = dot(rgbB, luma);
	if((lumaB < lumaMin) || (lumaB > lumaMax))
	{
		gl_FragColor.xyz=rgbA;
	}else
	{
		gl_FragColor.xyz=rgbB;
	}
	gl_FragColor.w=1.0;
}


